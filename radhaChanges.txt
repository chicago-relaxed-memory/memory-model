


Operational Rules

Registers: r,s, ..

Registers are single assignment

Locations:          x, y, ..
Lists of locations: L 

Expressions:  E, E1, ..
Expressions with locations: (E,L)


Store : S1, S2,...    : Map of registers to (value,List(Variable)
Memory: M1, M2, ......: Map of locations to values

Commands:  
  r = (x,L); 
  r = (E,L);
  x = (r,L);
  if (r,L) then C1 else C2
  C1; C2

C[L1] defined as:
  r = (x, L cup L1); 
  r = (E,L cup L1);
  x = (r,L cup L1);
  if (r,L1 cup L) then C1[L1] else C2[L1]
  C1[L1]; C2[L1]

Config: ((S1,C1), ...,(S,Cn), M) 

Labels: (R x v,L,r, tId)   
        (W x v, L,tiD)



0) Expression evaluation
       [| E |] S returns (value, List of registers used to evaluate it)

   So, property is:
       [| (E,<>) |] S = (v,L) ==> 
           a) [| E |] (S|L) = (v,L)
           b) [| E |] (S|L') = undefined if L < L'

       [| (E,L) |] S = (v,L cup L1), where [| (E,<>) |] S = (v,L1) 



1) Context Rule.
(S, C), M --l--> (S', C'), M'
===========================================================================
((S,C), (S1,C1), .., (Sn,Cn)), M --l--> ((S',C'), (S1,C1), .., (Sn,Cn)), M'


2) Optimization Rule
     (S,C1;C2), M ----> (S,C1';C2), M
   if C1 is synchronization free
      C1' is linear
      C1 and C1' satisfy exactly the same Hoare triples whose preconditions include S

3) Read:
    (S, r=(x,L);C),   M[x -> v]) -- (R x v,L,r,tId) --> (S[r -->(v,L)], C), M[x--> v])
    (S, r=^acq (x,L), M[x -> v]) -- (R x v,L,r,tId) --> (S[r -->(v,L)], 
                                                         C[L cup {r}]), M[x--> v])

4) Expression evaluation:
    (S, r= (E,L);C), M ---> (S[r --> ([| (E,L) |] S)], C), M 

5) Write:
     (S[r --> (v,L)], x=r[L1]; C), M 
           --(W x v, L cup L1,tId) -> (S[r --> (v,L)], C), M [x--> v]

     

6) Conditional
     (S[r --> (true,L), if r then C1 else C2), M
              ---> S[r --> (true,L), C1[L ]
     (S[r --> (false,L), if r then C1 else C2), M
              ---> (S[r --> (false,L), C1[L]),  M


From traces to Pomsets.
   Event at a time
   Inductively maintaining invaraint.
   Coherence order on writes on each location
   

events: R x v tId, W x v tId

(thread Ids dropped later)

Order: Each (W y v) from a (W y v, L, tId)  is ordered after
          the (R x v) coming from (R x v,L, tID)  where r in L
       Each (W y v ) ordered after all prior (W y v')
       Each (R x v) ordered after the currently maximum (W x v)
       
       Each event in tId  ordered after all prior (Racq, .., TiD)
       Each event in tId  ordered before all subsequent (Wrel, .., tId)
       If e,e' in same tId, SC accesses: e ordered before e' if e before e


=========================================================================

Logic.  Hoare Rules +

    Modalilty Ax, for each location x.
         so
           phi ==> Ax (phi), Ax ( Ax ( phi)) ==> Ax (phi)
          (phi ==> psi) ==> (Ax(phi) ==> Ax(psi))
          
          Can include full commutativity.
               (A(phi) ==> A(psi) ==> A(phi and psi))??
           
    CoModality Rx: so
           Rx(phi) ==> phi, 
           Rx(phi) => Rx(Rx(phi))
           Rx(phi ==> psi) ==> Rx(phi) ==> Rx(psi)
           true ==> Rx(true)


New Rules:
    {phi[x/r])}        r   = x^a {Ax phi}
    {phi[M/x]}       x^r = M     {Rx phi }

A transformation is valid from C --> C' if:
            (a) (co)Modality free, C and C' satisfy the same formulas
            (b) With (co)Modality, C' satisfies more formulas

  Example:
    {true}    r = x^a; y =1; {y=1}
    {true}    y=1; r = x^a;  {Ax(y=1)}  [cannot prove:  {true} y=1; r = x^a {y=1} ]

    {true}    y=1; x^r = 3; {R(y=1 /\x=3)}
    {true}    x^r=3; y=1;   {R(x=3)/\ y=1} [cannot prove the above]

   


       


     








