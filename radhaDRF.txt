Def: Let P be a pomset.  e an event in P
   after(e) = {f in P | f = e (OR) e s--> f }
   strictlyAfter(e) = {f in P | f = e (OR) e s--> f }

Def: 
    f ifr g if: e ird f, e -->g, (e,g) writes on same var
    WeakPerVar =  w-->|var cup ifr cup ird

Require: [COHERENCE]
  linearorder( w-->| writes of a var)  

   
Def: (Minimal)
Let P be such that:
    * Only cross thread s--> edges are from hb or write--->read
    * w---> = (s--> cup WeakPerVar)closure

Closure properties:
  a. Let P in [| C |].  Let e be a read, (R x v). v' chosen as any value.   
           Then, there is a pomset Q in [| C |]
                     there is a maximal event e' = (R x v'), for any v'
                     Q agrees with P on P \ after(e)

  b. Let P in [| C |] be minimal. 
     Let e (resp. f) be writes on same var such that 
               e not(s-->) f
               e w--> f
               no other write f' (on same var) such that:
                      e w--> f' w--> f

     Then, there is a minimal pomset Q in [| C |] 
           Q only differs from P in weak order, such that 
                f w--> e 
           in Q
    Proof: Only change the weak order.
         Changes in Q:
           (i)      f w-->e in r     
          (ii)  For all reads r matched to e in P, change from;
                    r w--> f to f w--> r
         (iii) For all reads r matched to f in P, change from;           
                    e w--> r to r w--> e

                    
Def: P is said to be SEQ if:
  acylic(po cup s--> cup WeakPerVar)

Def: If P is SEQ, def Explicate(P):
For each ird edge
      W x i --> f
add a new event R x i and edges:
      R x i s--> f
      W x i s--> R x i
and any induced edges
   e s--> W x i  ==> e s--> R x i  [same for weak]
   f s--> e      ==> R x i s--> e  [same for weak]
  
Lemma:
   If P is SEQ, explicate(P) is a valid pomset
Proof:
      * No s--> cycles (since any cycle in explicate(P) involving new event induces a cycle in P)
      * Visibility maintained since W x i is immediate s--> predecessor of new event

Lemma.  Let P in [| C |] is SEQ,  then explicate(P) in SEQ[| C |]

Proof: (* Structural induction *)
  

Def: Two events are in conflict if they are on same variable and at least one of them is a write 

Def: A race is a pair of conflicting events unrelated by hb
 
Def: Q in [| C |] demonstrates a race if:
               a. Q is SEQ
               b. There is a race in Q 
  
Thm:
Given a minimal P.
    if P does not have a race, then P is SEQ
    if P has a race, then there exists Q in [| C |] that demonstrates a race

Lemma.Given (P,Q) where:
          a) P, Q are minimal elements of an execution.  P has a race
          b) Q is a prefix of P under all of po, s-->, WeakPerVar
          c) Q is SEQ
    Then,Q can be extended into a SEQ Q' in [| C |] that demonstrates a race.
          
Proof:    
Count size of events for W with ird inedges as 1 + #Ird-Edges 

Indn on -|Q|

Consider maximal prefix ( wrt all of po,s-->,WeakPerVar) of P that extends Q.   
If it is bigger than Q, we are done (by IH)

Otherwise, Q is maximal such prefix of P. 

Choose events that are minimal wrt po.
Choose subset of events that are minimal wrt s--> (so also hb minimal)

Let this subset be e0... en

Let  be the next events wrt po that are minimal wrt 

  There are e0'..en'  such that:
                ei   po  ei'
                ei'  WPV-> e[(i+1) mod k]

  If all  ei   po  ei' is such that
           ei s--> ei'
  we have a  cycle in w--> on a SingleVar.  Contradiction.


  So, there is an ej po ej' is such that not(ej s--> ej').  Choose:

  Case (a): ej is a read.  
                  Use Closure (a) change read to read a value from previous(ej)
                  (e'(j-1), ej) race is unaffected.
                  |Q| goes up

  Case (b): ej is a write.
                 ej is hb minimal.
                 So, for all writes f on same var such that f w--> ej, we know that not (f s--> ej) 
                 Use Closure (b) to move ej after such fs.

                 So, wlog we can assume that e'(j-1) is a read.  
                 Use Closure (a) change read to read ej
                 (e'(j-1), ej) race is unaffected.
                 |Q| goes up

      